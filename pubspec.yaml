# pubspec.yaml (at the monorepo root)

name: eventually_workspace
description: The root workspace for the Eventually project monorepo.
# This version is for the workspace only and does not affect package versions.
version: 1.0.0

# Setting publish_to: 'none' is a best practice to prevent accidentally
# publishing the entire workspace to pub.dev.
publish_to: "none"

environment:
  sdk: ">=3.9.0 <4.0.0"

workspace:
  - packages/eventually

# 🛠️ Dev dependencies used for managing the whole repository.
dev_dependencies:
  # Pin the version of melos used by the project.
  melos: ^7.1.0

  # A common set of lints for all packages to share.
  # This ensures consistent code style across the repo.
  lints: ^4.0.0

melos:
  # Scripts that can be run with `melos run <script_name>`
  scripts:
    test:
      run: |
        echo "🧪 Running tests for all packages and apps..."
        melos run test:packages
      description: Run appropriate tests for all packages.

    test:packages:
      run: melos exec --concurrency=10 --scope="eventually*" --dir-exists="test" -- "dart test --reporter=expanded"
      description: Run Dart tests in packages only.

    analyze:
      run: melos exec --concurrency=10 -- "dart analyze --no-fatal-warnings"
      description: Run static analysis on all packages.

    format:
      run: melos exec -- "dart format . --set-exit-if-changed"
      description: Format code in all packages.

    # ✨ Super simple version management with Melos 7.x!
    # Just version the base package - all dependencies updated automatically! 🚀
    version-patch:
      run: melos version eventually patch --yes
      description: Increment patch version for eventually (dependent packages updated automatically, git tag created).

    version-minor:
      run: melos version eventually minor --yes
      description: Increment minor version for eventually (dependent packages updated automatically, git tag created).

    version-major:
      run: melos version eventually major --yes
      description: Increment major version for eventually (dependent packages updated automatically, git tag created).

    # Enhanced publish commands
    publish-dry-run:
      run: melos exec --no-private --concurrency=1 -- "dart pub publish --dry-run || true"
      description: Preview what would be published without actually publishing.

    publish-packages:
      run: melos publish --no-private --yes
      description: Publish all packages to pub.dev.

    # Pre-publish checks
    pre-publish-check:
      run: |
        echo "🔍 Running pre-publish checks..."
        melos run analyze &&
        melos run test &&
        melos run format &&
        melos run publish-dry-run
      description: Run all checks before publishing packages.

    # Clean workspace
    clean:
      run: melos clean
      description: Clean all packages (removes build artifacts and .dart_tool directories).

    # Check dependencies for updates
    outdated:
      run: melos exec -- "dart pub outdated"
      description: Check for outdated dependencies across all packages.

    # Development helpers
    get-all:
      run: melos exec -- "dart pub get"
      description: Run pub get in all packages.

    upgrade-all:
      run: melos exec -- "dart pub upgrade"
      description: Run pub upgrade in all packages.

    deps-check:
      run: |
        echo "📦 Checking package dependencies..."
        melos list --parsable --json | jq -r '.[].path' | while read package; do
          echo "Checking $package"
          cd "$package"
          dart pub deps --json | jq -r '.packages[] | select(.kind == "direct") | "\(.name): \(.version)"' | sort
          cd - > /dev/null
        done
      description: Check all package dependencies.
